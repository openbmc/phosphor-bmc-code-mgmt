{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f598cfad_a5dfd32a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-06-02T17:57:05Z",
      "side": 1,
      "message": "Would it be possible to use something like emit_object_added instead and see if it resolves the issue for all the interfaces?",
      "revId": "25052ed82da99aef8e1786672e9e6d182437ba42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5665963a_936f76dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-06-03T13:46:23Z",
      "side": 1,
      "message": "```emit_object_added``` is part of\n```sdbusplus/include/sdbusplus/server/object.hpp```\nand part of the sync sdbusplus api.\n\nI\u0027m not sure if they can mix and match.\n\nEven if they did, this patch is more intended as a gap-filling solution while sdbusplus generated code is being patched to emit the signals by itself.\n\nIf ```emit_object_added``` were applicable, we would have to insert it at every place where a dbus interface is created. Since their order can matter and should not be mixed up.  Then we have the same situation as with ```emit_added()```.",
      "parentUuid": "f598cfad_a5dfd32a",
      "revId": "25052ed82da99aef8e1786672e9e6d182437ba42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}