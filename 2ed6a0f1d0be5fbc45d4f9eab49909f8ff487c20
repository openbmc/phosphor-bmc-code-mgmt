{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9e25627e_b1c76fde",
        "filename": "bios-spi/spi_device_code_updater.cpp",
        "patchSetId": 40
      },
      "lineNbr": 146,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-04T18:58:46Z",
      "side": 1,
      "message": "Please update this to read the FW version from BIOS.",
      "revId": "2ed6a0f1d0be5fbc45d4f9eab49909f8ff487c20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d77783b4_5a9c4db7",
        "filename": "bios-spi/spi_device_code_updater.cpp",
        "patchSetId": 40
      },
      "lineNbr": 146,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-02-14T11:52:21Z",
      "side": 1,
      "message": "Waiting on a reply from Peter to see how this should be done on the target platform.\n\nWe have couple of options here, and i need some help to decide what to implement.\n\n- power off the host, look for some UEFI specific headers in spi flash, extract the version.\n\n- wait for some signal that its safe to access the host spi flash while the host is running, then same as above.\n\n- use some sideband interface to query the currently running fw version\n  - Question here would be which interface to use\n\n- ... something else?",
      "parentUuid": "9e25627e_b1c76fde",
      "revId": "2ed6a0f1d0be5fbc45d4f9eab49909f8ff487c20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efda1ba1_6eb219d7",
        "filename": "bios-spi/spi_device_code_updater.cpp",
        "patchSetId": 40
      },
      "lineNbr": 146,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-21T04:27:36Z",
      "side": 1,
      "message": "As we discussed, please use a file in /var/.../host0_bios_version to get the BIOS version, as part of Post complete we can update the BIOS version in this persistent file.\n\nYou also need to watch for any change to this file and make the changes to the version object for the softwareCurrent, for example, you can use something like https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75617/43/src/NotifyWatch.hpp.",
      "parentUuid": "d77783b4_5a9c4db7",
      "revId": "2ed6a0f1d0be5fbc45d4f9eab49909f8ff487c20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c644f5fc_1b588229",
        "filename": "bios-spi/spi_device_code_updater.cpp",
        "patchSetId": 40
      },
      "lineNbr": 146,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-02-21T17:22:01Z",
      "side": 1,
      "message": "Created this file and added your ```NotifyWatch.hpp``` to this patch.\n\nConnected it to class SPIDevice such that it will watch the file for change and update the current version.\n\nAlso uploaded another patch which allows version interface to be updated.\nEither that, or not have a software version interface on dbus at all if the version cannot be read, which would be rather limiting.\n\n\n```\nroot@s8030-bmc-30303035c0c1:~# echo \"1.80\" \u003e /var/bios/host0_bios_version.txt\n```\n\nlog output\n\n```\n\u003c7\u003e HostSPIFlash_9809: set version v1.70\n\u003c7\u003e HostSPIFlash_9809: set version v1.71\n\u003c3\u003e Failed to read notify event: Resource temporarily unavailable\n\u003c7\u003e HostSPIFlash_9809: set version 1.80\n```\n\nbusctl introspect\n\n```\nxyz.openbmc_project.Software.Version    interface -         -                                        -\n.Purpose                                property  s         \"xyz.openbmc_project.Software.Version... emits-change writable\n.Version                                property  s         \"1.80\"                                   emits-change writable\n```",
      "parentUuid": "efda1ba1_6eb219d7",
      "revId": "2ed6a0f1d0be5fbc45d4f9eab49909f8ff487c20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}