{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "92dd4fec_6aa07232",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2025-07-17T17:00:34Z",
      "side": 1,
      "message": "I posted the test results in a Discord thread:\nhttps://discord.com/channels/775381525260664832/867820390406422538/threads/1395349728459231316\n\nDuring testing `phosphor-image-updater` crashes with the following errors:\n1) `std::bad_alloc` -\u003e sigabrt;\n2) segfault.",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c41da776_c1c739fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-07-17T18:25:15Z",
      "side": 1,
      "message": "1. @striker_1993@mail.ru I would suggest NOT to make any changes to repo versions but just take the one\u0027s which are in openbmc/openbmc and use this patch and see how it goes. Did u test with this combination?\n2. Also for your testing can please add a info log before this-\u003eparent.erase(this-\u003eversionId); to see if it actually gets called. Also you can add and check the logs in https://github.com/openbmc/phosphor-bmc-code-mgmt/blob/master/bmc/item_updater.cpp#L490 erase function and see what flow is it going through?",
      "parentUuid": "92dd4fec_6aa07232",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4c23cc3_4e7d00e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2025-07-18T16:30:19Z",
      "side": 1,
      "message": "1. Yes.\nThis revision: https://github.com/openbmc/openbmc/commit/0fc8d76b76\nAnd applied your patch.\n\n2. Changes and logs are below.",
      "parentUuid": "c41da776_c1c739fd",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5325ae6_530a5f86",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2025-07-18T16:44:45Z",
      "side": 1,
      "message": "```\ndiff --git a/bmc/activation.cpp b/bmc/activation.cpp\nindex 5cbeed5..3d009ea 100644\n--- a/bmc/activation.cpp\n+++ b/bmc/activation.cpp\n@@ -447,8 +447,11 @@ void Activation::onStateChangesBios(sdbusplus::message_t\u0026 msg)\n             parent.biosVersion-\u003eversion(\n                 parent.versions.find(versionId)-\u003esecond-\u003eversion());\n \n+            error(\"[DEBUG] Outside coro\");\n             // Delete the uploaded activation\n             ctx.spawn([this]() -\u003e sdbusplus::async::task\u003c\u003e {\n+                error(\"[DEBUG] Inside coro\");\n+                //error(\"[DEBUG] Inside coro: versionId\u003d{ID}\", \"ID\", this-\u003eversionId);\n                 this-\u003eparent.erase(this-\u003eversionId);\n                 co_return;\n             }());\ndiff --git a/bmc/item_updater.cpp b/bmc/item_updater.cpp\nindex 6320158..0974fe7 100644\n--- a/bmc/item_updater.cpp\n+++ b/bmc/item_updater.cpp\n@@ -489,8 +489,10 @@ void ItemUpdater::processBMCImage()\n \n void ItemUpdater::erase(std::string entryId)\n {\n+    error(\"[DEBUG] Inside erase(): arg\u003d{ID}\", \"ID\", entryId);\n     // Find entry in versions map\n     auto it \u003d versions.find(entryId);\n+    error(\"[DEBUG] Inside erase(): step1\");\n     if (it !\u003d versions.end())\n     {\n         if (it-\u003esecond-\u003eisFunctional() \u0026\u0026 ACTIVE_BMC_MAX_ALLOWED \u003e 1)\n\n```\n\nLog:\n\n```\nJul 18 19:01:25 openbmc phosphor-image-updater[12979]: BMC activation has ended - BMC reboots are re-enabled.\nJul 18 19:01:25 openbmc phosphor-image-updater[12979]: Bios upgrade completed successfully.\nJul 18 19:01:25 openbmc phosphor-image-updater[12979]: [DEBUG] Outside coro\nJul 18 19:01:25 openbmc phosphor-image-updater[12979]: [DEBUG] Inside coro\nJul 18 19:01:25 openbmc phosphor-image-updater[12979]: [DEBUG] Inside erase(): arg\u003d\nJul 18 19:01:26 openbmc systemd[1]: Starting Removes the guard that blocks BMC reboot...\nJul 18 19:01:26 openbmc systemd-coredump[15000]: Process 12979 (phosphor-image-) of user 0 terminated abnormally with signal 11/SEGV, processing...\n\n```\n\nIf uncomment line 554 (this is the commented out error() call) \u003d\u003d attempt to access `this-\u003eversionId`):\n\n```\nJul 18 19:07:14 aqc621ab phosphor-image-updater[18570]: BMC activation has ended - BMC reboots are re-enabled.\nJul 18 19:07:14 aqc621ab phosphor-image-updater[18570]: Bios upgrade completed successfully.\nJul 18 19:07:14 aqc621ab phosphor-image-updater[18570]: [DEBUG] Outside coro\nJul 18 19:07:14 aqc621ab phosphor-image-updater[18570]: [DEBUG] Inside coro\nJul 18 19:07:15 aqc621ab systemd[1]: Starting Removes the guard that blocks BMC reboot...\nJul 18 19:07:15 aqc621ab systemd-coredump[19058]: Process 18570 (phosphor-image-) of user 0 terminated abnormally with signal 11/SEGV, processing...\n\n```",
      "parentUuid": "f4c23cc3_4e7d00e0",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d087192_3f6c89c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001853
      },
      "writtenOn": "2025-07-18T16:47:40Z",
      "side": 1,
      "message": "Also tried this change:\n\n```\ndiff --git a/bmc/activation.cpp b/bmc/activation.cpp\nindex 5cbeed5..4aaeca1 100644\n--- a/bmc/activation.cpp\n+++ b/bmc/activation.cpp\n@@ -447,8 +447,10 @@ void Activation::onStateChangesBios(sdbusplus::message_t\u0026 msg)\n             parent.biosVersion-\u003eversion(\n                 parent.versions.find(versionId)-\u003esecond-\u003eversion());\n \n+            error(\"[DEBUG] Outside coro: this\u003d{ADDR}\", \"ADDR\", this);\n             // Delete the uploaded activation\n             ctx.spawn([this]() -\u003e sdbusplus::async::task\u003c\u003e {\n+                error(\"[DEBUG] Inside coro: this\u003d{ADDR}\", \"ADDR\", this);\n                 this-\u003eparent.erase(this-\u003eversionId);\n                 co_return;\n             }());\ndiff --git a/bmc/item_updater.cpp b/bmc/item_updater.cpp\nindex 6320158..0974fe7 100644\n--- a/bmc/item_updater.cpp\n+++ b/bmc/item_updater.cpp\n@@ -489,8 +489,10 @@ void ItemUpdater::processBMCImage()\n \n void ItemUpdater::erase(std::string entryId)\n {\n+    error(\"[DEBUG] Inside erase(): arg\u003d{ID}\", \"ID\", entryId);\n     // Find entry in versions map\n     auto it \u003d versions.find(entryId);\n+    error(\"[DEBUG] Inside erase(): step1\");\n     if (it !\u003d versions.end())\n     {\n         if (it-\u003esecond-\u003eisFunctional() \u0026\u0026 ACTIVE_BMC_MAX_ALLOWED \u003e 1)\n\n```\n\nLog:\n\n```\nJul 18 19:12:02 openbmc phosphor-image-updater[21441]: BMC activation has ended - BMC reboots are re-enabled.\nJul 18 19:12:02 openbmc phosphor-image-updater[21441]: Bios upgrade completed successfully.\nJul 18 19:12:02 openbmc phosphor-image-updater[21441]: terminate called after throwing an instance of \u0027std::length_error\u0027\nJul 18 19:12:02 openbmc phosphor-image-updater[21441]:   what():  basic_string::_M_create\nJul 18 19:12:02 openbmc phosphor-image-updater[21441]: [DEBUG] Outside coro: this\u003d0x75a05308\nJul 18 19:12:02 openbmc phosphor-image-updater[21441]: [DEBUG] Inside coro: this\u003d0x00c89ea8\nJul 18 19:12:02 openbmc systemd[1]: Starting Removes the guard that blocks BMC reboot...\nJul 18 19:12:03 openbmc systemd-coredump[21982]: Process 21441 (phosphor-image-) of user 0 terminated abnormally with signal 6/ABRT, processing...\n```",
      "parentUuid": "f5325ae6_530a5f86",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b60173eb_def39d4d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-07-23T22:46:22Z",
      "side": 1,
      "message": "\u003e Jul 18 19:12:02 openbmc phosphor-image-updater[21441]: terminate called after throwing an instance of \u0027std::length_error\u0027\n\u003e Jul 18 19:12:02 openbmc phosphor-image-updater[21441]:   what():  basic_string::_M_create\n\nLooks like something wrong with the versionId. Can you try printing it before lambda and check the value? I don\u0027t think activation object shall go out of scope until its erased but we need to see why correct versionId/entryId is not being passed. \n\n\nAlso going back to the original issue you mentioned on discord -\n\n\u003e ```\n\u003e Since boost::asio::io_context is not run, the downloaded activation will not be deleted, resulting in \"no free space\" after 3-4 iterations.\n\u003e Should it be fixed with sdbusplus::async::context spawn()?\n\u003e ```\n\nAre you running out of flash memory?",
      "parentUuid": "3d087192_3f6c89c6",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9c25045_1c0bcd43",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-07-28T02:51:57Z",
      "side": 1,
      "message": "There must be issue with the lambda capture. The below implementation works on my platform, can you also try it?\n\n```\nctx.spawn([](auto self) -\u003e sdbusplus::async::task\u003c\u003e {\n    self-\u003eparent.erase(self-\u003eversionId);\n    co_return;\n}(this));\n```",
      "parentUuid": "b60173eb_def39d4d",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d1ae64e_0a0c9599",
        "filename": "bmc/activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1002582
      },
      "writtenOn": "2025-07-28T08:16:29Z",
      "side": 1,
      "message": "Hi @paligill@gmail.com\nAs @chaul@amperecomputing.com suggested, using the below lambda function call the erase function correctly.\n```\nctx.spawn([](auto self) -\u003e sdbusplus::async::task\u003c\u003e {\n    self-\u003eparent.erase(self-\u003eversionId);\n    co_return;\n}(this));\n```\nBut eventhough calling the erase function it is not erasing the files under /tmp/images directory. Not sure the intended functionality of erase function. It seems it needs to implement a logic to delete the files under /tmp/images in erase function.",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87834c37_d7340d08",
        "filename": "bmc/activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-07-29T07:56:05Z",
      "side": 1,
      "message": "@anoo@us.ibm.com  Looks like ImageManager was the one to delete the images from /tmp/images dir https://grok.openbmc.org/xref/openbmc/phosphor-bmc-code-mgmt/bmc/image_manager.cpp?r\u003dcab87e9cdeeb3e166d6d577511f6be4dc7721aca#243. Do you know how item_updater used to call back into it or is it some other flow.\n\nPS: This is for bios update (not BMC).",
      "parentUuid": "2d1ae64e_0a0c9599",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bbd88b3_db9798d5",
        "filename": "bmc/activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2025-07-29T18:36:11Z",
      "side": 1,
      "message": "I think your observation is correct. The Version created by the ImageManager when a file was uploaded had its own erase callback that deletes the /tmp/images/\u003cid\u003e/ dir. But with the new code update, only the ItemUpdater Version is created, which has a erase callback that doesn\u0027t erase the /tmp/images/\u003cid\u003e/ dir.\n\nLet me just confirm that the /tmp/images/\u003cid\u003e dir is not erased either with bmc images with OnReset option, and I think we would just need to add the logic from the ImageManager erase() into the ItemUpdater erase().",
      "parentUuid": "87834c37_d7340d08",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db6085c9_c2015476",
        "filename": "bmc/activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-07-29T18:45:33Z",
      "side": 1,
      "message": "@anoo@us.ibm.com This is with the old flow with software-update-dbus-interface feature flag DISABLED. So, image_manager should still be there.\n\nSure in the new flow you can check and see whats the behavior.",
      "parentUuid": "8bbd88b3_db9798d5",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68a2c7ca_805093d4",
        "filename": "bmc/activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2025-07-29T19:45:44Z",
      "side": 1,
      "message": "I see.\n\n@chaul@amperecomputing.com @Kamalesh if you could you verify a few things?. The ItemUpdater erase() function calls deleteImageManagerObject() which just calls GetObject and Delete d-bus apis. We\u0027re going to try to call them manually:\n\n1. When you upload a bios image, check the /tmp/images/\u003cid\u003e/ dir is created:\n\n```\n# ls /tmp/images/\nc38f873b\n```\n\n2. Check that a Delete exists under the Version interface (there\u0027ll likely be a Delete one also under the Host.Updater interface):\n\n```\n# busctl -j call xyz.openbmc_project.ObjectMapper /xyz/openbmc_project/object_mapper xyz.openbmc_project.ObjectMapper GetObject sas /xyz/openbmc_project/software/c38f873b  1 xyz.openbmc_project.Software.Version\n...\n\t\t\t\"org.open_power.Software.Host.Updater\" : [\n...\n\t\t\t\t\"xyz.openbmc_project.Object.Delete\",\n...\n\t\t\t\"xyz.openbmc_project.Software.Version\" : [\n...\n\t\t\t\t\"xyz.openbmc_project.Object.Delete\",\n```\n\n3. Check that the Path property is set to /tmp/images/\u003cid\u003e:\n\n```\n# busctl introspect xyz.openbmc_project.Software.BMC.Updater /xyz/openbmc_project/software/c38f873b\n...\nxyz.openbmc_project.Common.FilePath                interface -         -                                        -\n.Path                                              property  s         \"/tmp/images/c38f873b\"                   emits-change writable\n```\n\n4. Try calling the Delete which is what the deleteImageManagerObject() calls:\n\n```\n# busctl call xyz.openbmc_project.Software.Version /xyz/openbmc_project/software/c38f873b xyz.openbmc_project.Object.Delete Delete\n```\n\n5. Check the /tmp/images/\u003cid\u003e/ dir is deleted:\n\n```\n# ls /tmp/images\n```",
      "parentUuid": "db6085c9_c2015476",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb4d74a6_8b01558a",
        "filename": "bmc/activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-07-30T03:17:23Z",
      "side": 1,
      "message": "\u003e We\u0027re going to try to call them manually\n\nI have tried all the steps before. I can confirm that calling Delete to the software object does not result in the /tmp/images/\u003cid\u003e being removed. The call is directed to ItemUpdater::erase() callback, which currently does not involve the removal.\n\n\u003e Let me just confirm that the /tmp/images/\u003cid\u003e dir is not erased either with bmc images with OnReset option\n\nYes, it\u0027s not removed even with OnReset option for BMC image, because when Activation is set, this [line](https://github.com/openbmc/phosphor-bmc-code-mgmt/blob/d9825681c72ef99f98371123f705fc3fdc86c913/bmc/activation.cpp#L148) also leads to ItemUdater::erase() function.\n\n\u003e I think we would just need to add the logic from the ImageManager erase() into the ItemUpdater erase().\n\nI think so. In our local WA to fix this, we added an `else` condition to this [if](https://github.com/openbmc/phosphor-bmc-code-mgmt/blob/d9825681c72ef99f98371123f705fc3fdc86c913/bmc/item_updater.cpp#L533) and erase the temp folder there. Do you think this is the correct move? I\u0027m not sure how it should be for BMC image.",
      "parentUuid": "68a2c7ca_805093d4",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6514cd30_a3d013f6",
        "filename": "bmc/activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2025-07-30T15:36:00Z",
      "side": 1,
      "message": "Ok, I would expect it to work in your environment since the ItemUpdater::erase() calls deleteImageManagerObject() which in turns calls the ImageManager::erase().\nBut at least you found that ItemUpdater::erase() is called and that we can add the deletion of the image there.\n\n\u003e I think so. In our local WA to fix this, we added an else condition to this if and erase the temp folder there. Do you think this is the correct move? I\u0027m not sure how it should be for BMC image.\n\nYeah I think that will work for both old and new implementations, and for both BIOS and BMC, let\u0027s just check if the path exists so that even if the ImageManager erase is called to delete the upload path, there are no errors if it doesn\u0027t exist.\n```\nelse\n{\n    fs::path imagePath(flashId);\n    std::error_code ec;\n    if (fs::exists(imagePath, ec))\n    {\n        fs::remove_all(imagePath, ec);\n    }\n}\n```",
      "parentUuid": "bb4d74a6_8b01558a",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94e9a229_0ad74362",
        "filename": "bmc/activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-07-31T02:32:45Z",
      "side": 1,
      "message": "\u003e Ok, I would expect it to work in your environment since the ItemUpdater::erase() calls deleteImageManagerObject() which in turns calls the ImageManager::erase().\nBut at least you found that ItemUpdater::erase() is called and that we can add the deletion of the image there.\n\ndeleteImageManagerObject() in this case does not call ImageManager::erase() though, because the Version and Delete interface for this software object, which is a result of a [UpdateManager::startUpdate()](https://github.com/openbmc/phosphor-bmc-code-mgmt/blob/d9825681c72ef99f98371123f705fc3fdc86c913/bmc/update_manager.cpp#L210) call, is registered [here](https://github.com/openbmc/phosphor-bmc-code-mgmt/blob/d9825681c72ef99f98371123f705fc3fdc86c913/bmc/item_updater.cpp#L186), and the erase callback passed in is ItemUpdater::erase(), not ImagerManager\u0027s. It\u0027s a different flow than the old implementation.\n\n\u003e Yeah I think that will work for both old and new implementations, and for both BIOS and BMC, let\u0027s just check if the path exists so that even if the ImageManager erase is called to delete the upload path, there are no errors if it doesn\u0027t exist.\n\nYes. Thank you for your info. I think I should send a patch, right as it will address the part of issue `https://github.com/openbmc/phosphor-bmc-code-mgmt/issues/16`, which will partly be fixed by this patch if the segmentation fault issue of it is addressed.",
      "parentUuid": "6514cd30_a3d013f6",
      "revId": "39185940245b38e045f03f9abbbd4d22ef816fd0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}