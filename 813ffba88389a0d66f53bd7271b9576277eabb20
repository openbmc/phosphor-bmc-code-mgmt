{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0e4e8639_40a8c14b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-03-06T17:15:07Z",
      "side": 1,
      "message": "Addressed. Thanks",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fbab9dc_0fa34db3",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-06T17:58:04Z",
      "side": 1,
      "message": "I don\u0027t think this should be an either-or for the time being.  We should start with a separate daemon because otherwise we\u0027re going to end up with a case where the old code isn\u0027t compiled in CI and we don\u0027t catch failures until we get to the Yocto side of the process.",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e9b4dd6_92f256b4",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-03-12T00:34:21Z",
      "side": 1,
      "message": "I have modified this patch and removed the meson option all together. The interface change is not that complex that we have to preserve two flows in parallel and we can make the change in the base code itself. Soon, i would raise the patch prototyping this and will see what\u0027s the feedback.",
      "parentUuid": "1fbab9dc_0fa34db3",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb15c5d7_4a6608ee",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-03-12T08:35:46Z",
      "side": 1,
      "message": "I don\u0027t see the new patchset ?",
      "parentUuid": "7e9b4dd6_92f256b4",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fa5a03c_1e10245b",
        "filename": "meson.options",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-03-12T08:35:46Z",
      "side": 1,
      "message": "Why enabled by default?",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aee87a15_8d75fd90",
        "filename": "meson.options",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-25T14:27:38Z",
      "side": 1,
      "message": "Why not?  Our default policy should be that all code compiles in CI and is optionally disabled via bitbake recipes as needed.",
      "parentUuid": "8fa5a03c_1e10245b",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f67624b_d4e2c6a4",
        "filename": "meson.options",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-03-25T16:57:38Z",
      "side": 1,
      "message": "This is different than what we have done in bmcweb.\n \nMy main concern here is consistency across the repos. \nA 2nd concern is companies knowing how to disable this.\nA 3rd concern is since most layers use the default, non production-ready features will be enabled.\n\nOnly later, after a feature is \"ready for production\" in bmcweb, have we enabled it by default.  https://github.com/openbmc/bmcweb/commit/8615915cc51a468c1c0b6eabb684616d0f2abe0f\n\nFrom a tested in CI, it makes sense our default policy should enabled.\n\nHow should companies/layers know to disable new options? Options like this might not be production-ready. Should options that are more companyâ€”or architecture-specific also be enabled by default?\n\nIn bmcweb, should features like aggregation, experimental-redfish-multi-computer-system, and experimental-http2 be enabled by default?\nhttps://github.com/openbmc/bmcweb/blob/master/meson_options.txt#L284\n\nThose options are still under development, they aren\u0027t a full fledged feature. aggregation I might support enabling by default. \n\nWhat about more company or architecture-specific like ibm-management-console, redfish-dump, and crashdump?\n\ncrashdump calls com.intel.crashdump so I would say no, same with ibm-management-console. \n\nredfish-dump uses phosphor-debug-collector so I would support that being enabled by default.",
      "parentUuid": "aee87a15_8d75fd90",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24d7b3a2_84eb1b7a",
        "filename": "meson.options",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-25T17:24:40Z",
      "side": 1,
      "message": "\u003e This is different than what we have done in bmcweb.\n\nHonestly, bmcweb is the \"weird one\" in this context.  Almost every other repository we have taken the opposite stance.  Anytime I come across one doing it backwards, I usually try to fix it (which usually happens when I fix something and then only realize that the \"OEM\" side is broken due to a Yocto config in meta-ibm/meta-openpower).\n\n\u003e A 2nd concern is companies knowing how to disable this.\n\nThis is on the person owning the meson.option and the maintainer to ensure that there is a PACKAGECONFIG added for it at the same time and disabled by default.\n\n\u003e A 3rd concern is since most layers use the default, non production-ready features will be enabled.\n\nSee my response to 2nd concern.  It is the same answer.\n\n\u003e From a tested in CI, it makes sense our default policy should enabled.\n\nNo.  Tested in CI should be the maximal amount of code tested.  Otherwise you end up with (and we\u0027ve had this exact problem) code that is only even compiled by Yocto-integration-time and is broken.  I kept having this problem with PLDM specifically in the recent past.\n\n\u003e In bmcweb, should features like aggregation, experimental-redfish-multi-computer-system, and experimental-http2 be enabled by default?\n\nI\u0027m not going to discuss bmcweb policy in a change in a different repository.  We can discuss this elsewhere.\n\n\u003e What about more company or architecture-specific like ibm-management-console, redfish-dump, and crashdump?\n\nThere are examples of exactly this in many other repositories.  In CI for the repository we enable all OEM paths; in meta-phosphor we disable them.  See phosphor-dbus-interfaces, pldm, etc.",
      "parentUuid": "7f67624b_d4e2c6a4",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}