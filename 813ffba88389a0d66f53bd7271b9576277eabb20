{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "648905ed_1cb6a2d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-25T20:31:31Z",
      "side": 1,
      "message": "More details needed.  One sentence of description is rarely enough detail for a commit message.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 45
      },
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e4e8639_40a8c14b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-03-06T17:15:07Z",
      "side": 1,
      "message": "Addressed. Thanks",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a30c471_1fc6265f",
        "filename": "image_manager_main_new.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-25T20:31:31Z",
      "side": 1,
      "message": "?  Why are we making a total new app?  The design is just changing some dbus APIs, it shouldn\u0027t be designing a whole new daemon?",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 6,
        "endChar": 1
      },
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f6afe03_09e46574",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-25T20:31:31Z",
      "side": 1,
      "message": "can we get a better name than \"NEW\". In a few months it won\u0027t be \"new\" so lets be descriptive of what\u0027s it\u0027s doing.",
      "range": {
        "startLine": 71,
        "startChar": 10,
        "endLine": 71,
        "endChar": 14
      },
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fbab9dc_0fa34db3",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-06T17:58:04Z",
      "side": 1,
      "message": "I don\u0027t think this should be an either-or for the time being.  We should start with a separate daemon because otherwise we\u0027re going to end up with a case where the old code isn\u0027t compiled in CI and we don\u0027t catch failures until we get to the Yocto side of the process.",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e9b4dd6_92f256b4",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-03-12T00:34:21Z",
      "side": 1,
      "message": "I have modified this patch and removed the meson option all together. The interface change is not that complex that we have to preserve two flows in parallel and we can make the change in the base code itself. Soon, i would raise the patch prototyping this and will see what\u0027s the feedback.",
      "parentUuid": "1fbab9dc_0fa34db3",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb15c5d7_4a6608ee",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-03-12T08:35:46Z",
      "side": 1,
      "message": "I don\u0027t see the new patchset ?",
      "parentUuid": "7e9b4dd6_92f256b4",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fa5a03c_1e10245b",
        "filename": "meson.options",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-03-12T08:35:46Z",
      "side": 1,
      "message": "Why enabled by default?",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aee87a15_8d75fd90",
        "filename": "meson.options",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-25T14:27:38Z",
      "side": 1,
      "message": "Why not?  Our default policy should be that all code compiles in CI and is optionally disabled via bitbake recipes as needed.",
      "parentUuid": "8fa5a03c_1e10245b",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f67624b_d4e2c6a4",
        "filename": "meson.options",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-03-25T16:57:38Z",
      "side": 1,
      "message": "This is different than what we have done in bmcweb.\n \nMy main concern here is consistency across the repos. \nA 2nd concern is companies knowing how to disable this.\nA 3rd concern is since most layers use the default, non production-ready features will be enabled.\n\nOnly later, after a feature is \"ready for production\" in bmcweb, have we enabled it by default.  https://github.com/openbmc/bmcweb/commit/8615915cc51a468c1c0b6eabb684616d0f2abe0f\n\nFrom a tested in CI, it makes sense our default policy should enabled.\n\nHow should companies/layers know to disable new options? Options like this might not be production-ready. Should options that are more companyâ€”or architecture-specific also be enabled by default?\n\nIn bmcweb, should features like aggregation, experimental-redfish-multi-computer-system, and experimental-http2 be enabled by default?\nhttps://github.com/openbmc/bmcweb/blob/master/meson_options.txt#L284\n\nThose options are still under development, they aren\u0027t a full fledged feature. aggregation I might support enabling by default. \n\nWhat about more company or architecture-specific like ibm-management-console, redfish-dump, and crashdump?\n\ncrashdump calls com.intel.crashdump so I would say no, same with ibm-management-console. \n\nredfish-dump uses phosphor-debug-collector so I would support that being enabled by default.",
      "parentUuid": "aee87a15_8d75fd90",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24d7b3a2_84eb1b7a",
        "filename": "meson.options",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-25T17:24:40Z",
      "side": 1,
      "message": "\u003e This is different than what we have done in bmcweb.\n\nHonestly, bmcweb is the \"weird one\" in this context.  Almost every other repository we have taken the opposite stance.  Anytime I come across one doing it backwards, I usually try to fix it (which usually happens when I fix something and then only realize that the \"OEM\" side is broken due to a Yocto config in meta-ibm/meta-openpower).\n\n\u003e A 2nd concern is companies knowing how to disable this.\n\nThis is on the person owning the meson.option and the maintainer to ensure that there is a PACKAGECONFIG added for it at the same time and disabled by default.\n\n\u003e A 3rd concern is since most layers use the default, non production-ready features will be enabled.\n\nSee my response to 2nd concern.  It is the same answer.\n\n\u003e From a tested in CI, it makes sense our default policy should enabled.\n\nNo.  Tested in CI should be the maximal amount of code tested.  Otherwise you end up with (and we\u0027ve had this exact problem) code that is only even compiled by Yocto-integration-time and is broken.  I kept having this problem with PLDM specifically in the recent past.\n\n\u003e In bmcweb, should features like aggregation, experimental-redfish-multi-computer-system, and experimental-http2 be enabled by default?\n\nI\u0027m not going to discuss bmcweb policy in a change in a different repository.  We can discuss this elsewhere.\n\n\u003e What about more company or architecture-specific like ibm-management-console, redfish-dump, and crashdump?\n\nThere are examples of exactly this in many other repositories.  In CI for the repository we enable all OEM paths; in meta-phosphor we disable them.  See phosphor-dbus-interfaces, pldm, etc.",
      "parentUuid": "7f67624b_d4e2c6a4",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "939b6630_b13b3baa",
        "filename": "meson.options",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-25T20:31:31Z",
      "side": 1,
      "message": "\u003e This is different than what we have done in bmcweb.\n\nI think you two will actually agree, but there\u0027s a nuance to what Gunnar said that I don\u0027t think comes though in the text unless you understand bmcweb.  In bmcweb:\n1. All code is compiled in all modes.  Unit tests are run for code that isn\u0027t neccesarily enabled the build.\n2. Only the user-facing BEHAVIOR is changed (usually through a minor constexpr if so we\u0027re testing the negative paths syntax as well) if the option is enabled.\n\nThat way we get CI coverage, everyone is running all the unit tests, but we can keep reasonable defaults at the same time.  In this patchset, I think we can get the same behavior by:\n- keep the existing app (don\u0027t invent a new main()).\n- Where it makes sense in the existing app, put\n\n```\nif constexpr(do_new_thing){\n    new_thing();\n} else {\n    old_thing();\n}\n```\n\nI thought we were keeping the old behavior temporarily, so maybe the old_thing() needs to go in an unconditional bracket, but you get the point.  We\u0027re not selectively compiling code, we\u0027re selectively enabling branches until the existing uses of the old interfaces are brought up to date.\n\n\u003e In bmcweb, should features like aggregation, experimental-redfish-multi-computer-system, and experimental-http2 be enabled by default?\n\nNote, that in bmcweb, http2 is COMPILED and TESTED regardless of if the option is enabled.  This technically meets Patricks ask that we test as much as possible, and Gunnars ask that we don\u0027t functionally break things in existing systems (both of which I think are reasonable and accomplishable in one patchset).\n\nhttps://github.com/openbmc/bmcweb/blob/d0eb0e7303744d03aaa6f994bbbcdd6dc92bab13/http/http_connection.hpp#L193\n\n\n\n\u003e A 2nd concern is companies knowing how to disable this.\n\nThis isn\u0027t going to be something we support for more than the O(months) it takes to get the new code in place, and my assumption was that we wouldn\u0027t need an option at all, we just expose the new interface, move things over, then delete the old interface.  Companies are free to manage their rebase however they like, but we\u0027re not going to maintain 2 firmware update DBus APIs just because people don\u0027t want to change their downstream patches.  The intent is that this new design is better for everything.  If there\u0027s functional problems with what\u0027s been proposed, NOW is the time to voice them, not after we get a bunch of patches in.\n\n\n\u003e A 3rd concern is since most layers use the default, non production-ready features will be enabled.\n\nI think the concern here is really, \"this patchset as written breaks working platforms\".  That needs fixed in this series.  Maybe that\u0027s the intent of this patch, but that wasn\u0027t captured in the one sentence commit message.  In terms of \"production readiness\" that\u0027s not really something openbmc has a definition of, so holding this patchset to some arbitrary guidelines seems ill advised.  Lets make sure this patch series is as functionally correct as we can make it before it merges, and when/if there are regression bugs, they should be minor and we can ask Jagpal to fix them.",
      "parentUuid": "24d7b3a2_84eb1b7a",
      "revId": "813ffba88389a0d66f53bd7271b9576277eabb20",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}