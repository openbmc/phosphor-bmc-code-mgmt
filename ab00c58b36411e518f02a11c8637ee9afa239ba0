{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3c69c2f4_e88d489f",
        "filename": "item_updater.cpp",
        "patchSetId": 5
      },
      "lineNbr": 420,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2024-09-05T20:45:20Z",
      "side": 1,
      "message": "Talked with Jagpal a bit on this because we\u0027re going to need a different approach since currently we don\u0027t have a variable that defines if a configuration supports dual versions or not. The STATIC_DUAL_IMAGE is one, but also MMC and UBI. Instead of having to manually add ifdef checks for all existing ones and new ones to come, let\u0027s try to do this programatically.\n\nAn option could be to add some logic at the end of the \"for\" loop that starts on line 271. After the loop, the versions map would had been populated. We can then iterate over the map as follows:\n\n```\nfor (const auto\u0026 versionIt : versions)\n{\n    if ((versions.size() \u003d\u003d 1) ||\n        (versions.size() \u003e 1) \u0026\u0026 (!versionIt.second-\u003eisFunctional())\n    {\n        if (versionIt.second-\u003epurpose() !\u003d VersionPurpose::BMC)\n        {\n           continue;\n        }\n        // This is the only BMC version, or the non-functional version\n        // in a system with more than one version, create Update object\n        // via \"createUpdateObject()\" and updateable association via\n        // \"createUpdateableAssociation\", version id can be accessed via\n        // versionIt.first, path can be accessed via versionIt.second-\u003epath().\n    }\n}\n```",
      "revId": "ab00c58b36411e518f02a11c8637ee9afa239ba0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07ecea27_4ffdcb74",
        "filename": "item_updater.cpp",
        "patchSetId": 5
      },
      "lineNbr": 420,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-09-11T23:07:43Z",
      "side": 1,
      "message": "Done.\n\nThanks for looking into this. I made few changes to your suggestion. Please let me know if there are any concerns -\n1. Since, this is processBMCImage API we don\u0027t need VersionPurpose check. Also, for BIOS, there is a different Updater instance so different versions map will be used.\n2. We don\u0027t need \"(versions.size() \u003e 1) \u0026\u0026 \" check as we will only enter this condition if versions.size() \u003e 1 (implicitly).\n3. I had to add objPath to version class as Path refers to FilePath object here.",
      "parentUuid": "3c69c2f4_e88d489f",
      "revId": "ab00c58b36411e518f02a11c8637ee9afa239ba0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "682661d5_a836a358",
        "filename": "item_updater.cpp",
        "patchSetId": 5
      },
      "lineNbr": 420,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2024-09-16T20:52:20Z",
      "side": 1,
      "message": "Thanks Jagpal. Changes look good.",
      "parentUuid": "07ecea27_4ffdcb74",
      "revId": "ab00c58b36411e518f02a11c8637ee9afa239ba0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}