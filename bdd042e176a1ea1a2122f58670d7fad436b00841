{
  "comments": [
    {
      "key": {
        "uuid": "ebe7cd5f_f5efb06f",
        "filename": "activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2021-05-21T20:05:11Z",
      "side": 1,
      "message": "An idea is to add a match for property change in createBIOSObject() in the item updater, then set the Activation property for bios_active to Invalid at the beginning of the bios update, then here set bios_active to Active, and the property change callback would then go through all bios versions and delete the ones that are note bios_active.",
      "revId": "bdd042e176a1ea1a2122f58670d7fad436b00841",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9847d80_aa5f4e69",
        "filename": "activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2021-06-04T09:10:22Z",
      "side": 1,
      "message": "Sorry for the late reply, I did not have the time to test the match signal.\nJust a quick question, will the match work if the signal is sent from its own process?",
      "parentUuid": "ebe7cd5f_f5efb06f",
      "revId": "bdd042e176a1ea1a2122f58670d7fad436b00841",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b221aaa9_da93d004",
        "filename": "activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2021-06-04T19:00:25Z",
      "side": 1,
      "message": "I would think it\u0027d work because the process would call dbus to change a property which would trigger a dbus PropertyChanged signal, and the watch would be triggered by any dbus signal that fits the match, even if that same process is the one that made the dbus call to update the property. But I guess we should try it.",
      "parentUuid": "a9847d80_aa5f4e69",
      "revId": "bdd042e176a1ea1a2122f58670d7fad436b00841",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0d5df4e_d056cd22",
        "filename": "activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2021-06-08T07:22:18Z",
      "side": 1,
      "message": "Will try it once I have time.\nFor now let\u0027s hold it.",
      "parentUuid": "b221aaa9_da93d004",
      "revId": "bdd042e176a1ea1a2122f58670d7fad436b00841",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5144f29_f4c9bc1b",
        "filename": "activation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2021-07-13T11:54:00Z",
      "side": 1,
      "message": "The \"match\" way is a bit complicated, and the case here really just needs an async call to erase the uploaded BIOS object.\nSo the code is updated to use boost asio to post a lambda to erase the object, which is more clear than the timer callback way.",
      "parentUuid": "e0d5df4e_d056cd22",
      "revId": "bdd042e176a1ea1a2122f58670d7fad436b00841",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}