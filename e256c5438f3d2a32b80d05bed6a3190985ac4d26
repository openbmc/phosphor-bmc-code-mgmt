{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5a16daec_c25b7d4b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-06-26T07:29:43Z",
      "side": 1,
      "message": "The apply time now becomes a argument as the new design, is it?\nIs it really necessary to create the apply time object? I guess you could add a enum value here and it should work.",
      "range": {
        "startLine": 10,
        "startChar": 25,
        "endLine": 10,
        "endChar": 50
      },
      "revId": "e256c5438f3d2a32b80d05bed6a3190985ac4d26",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d99f5fe7_f3fd92bf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-06-26T17:46:26Z",
      "side": 1,
      "message": "\u003e The apply time now becomes a argument as the new design, is it?\n\u003e Is it really necessary to create the apply time object? I guess you could add a enum value here and it should work.\n\nI have changed the wording to \"pointer\" rather than \"object\" to make it more clear. As mentioned in description, the unique_pointer gets created by new flow and if this pointer doesn\u0027t exist, the flow fallback to getting the applyTime from settingsd as it was doing earlier. Please let me know if you have any other suggestion for this?",
      "parentUuid": "5a16daec_c25b7d4b",
      "range": {
        "startLine": 10,
        "startChar": 25,
        "endLine": 10,
        "endChar": 50
      },
      "revId": "e256c5438f3d2a32b80d05bed6a3190985ac4d26",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76f75af0_5f7070ef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2024-06-28T21:43:22Z",
      "side": 1,
      "message": "What about a bool variable inside the Activation class like \u0027checkApplyTimeSetting\u0027 initialized to false.\nThen the \u0027ItemUpdater::createActivation()\u0027 function sets it to true after creating the Activation object. This function will become the old API and will be bypassed by the new implementation (per commit 70666).\nThe checkApplyTimeImmediate() can check this variable, if false then it returns.\n\nSimilar to what it\u0027s being proposed here, the difference is that it\u0027d be a simpler object (bool) since there\u0027s no need of defining the applytime interface, and we\u0027re not polluting the new code with logic that will need to be removed to determine if the old behavior should be used, we\u0027re letting the old code that watches for interfaces added to communicate that we\u0027re running the old API.",
      "parentUuid": "d99f5fe7_f3fd92bf",
      "range": {
        "startLine": 10,
        "startChar": 25,
        "endLine": 10,
        "endChar": 50
      },
      "revId": "e256c5438f3d2a32b80d05bed6a3190985ac4d26",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a01a8c26_0e3fef59",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2024-06-28T22:11:34Z",
      "side": 1,
      "message": "I envision that in any case the checkApplyTimeImmediate() function will become part of the \u0027old\u0027 logic and replaced by a new function that can handle more than 2 apply time values. As described in the design doc, at least a 3rd one (on demand) is desired.",
      "parentUuid": "76f75af0_5f7070ef",
      "range": {
        "startLine": 10,
        "startChar": 25,
        "endLine": 10,
        "endChar": 50
      },
      "revId": "e256c5438f3d2a32b80d05bed6a3190985ac4d26",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8047b9c2_001e7f71",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2024-07-07T01:56:29Z",
      "side": 1,
      "message": "Jagpal clarified in 70668 that we still need to know the ApplyTime as part of the Activation, so what about we use the inherit as others suggested, then initialize it as Immediate as the default (since the openbmc clients like the gui and usb code update use that value so that seems the preferred option). Then we use the `useUpdateDBusInterface` being introduced with 70666 to decide if the checkApplyTimeImmediate() should read the settings (old) or use the value that was initialized in the constructor, which the new manager can set to whatever value was passed via Start Update. We can access the item updater via `parent`.",
      "parentUuid": "a01a8c26_0e3fef59",
      "range": {
        "startLine": 10,
        "startChar": 25,
        "endLine": 10,
        "endChar": 50
      },
      "revId": "e256c5438f3d2a32b80d05bed6a3190985ac4d26",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "925579ac_9d0b74d1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-07-19T20:39:05Z",
      "side": 1,
      "message": "Adriana, \n1. I wasn\u0027t aware of  phosphor-usb-code-update until you mentioned it. I see it gets triggered via matcher for InterfaceAdded on /xyz/openbmc_project/software, who it will create this interface? I am trying to understand this flow as i see someone will insert a USB but then who will create this interface to start the flow?\n2. Also, phosphor-usb-code-update would need to be updated to use startUpdate D-Bus flow as my understanding from code inspection seems like it triggers it copies the image file from USB to /tmp/images dir?\n3. My understanding is that the activation.cpp which i am changing here only gets used in the phosphor-image-updater which in future will receive ApplyTime value from StartUpdate API, rather than reading it from settingsd (xyz.openbmc_project.Settings). So, if we need to change phosphor-usb-code-update as per Step#2, then phosphor-usb-code-update will directly send ApplyTime as OnReset as pert of request.\n4. Since, all apps will be sending instantaneous value for ApplyTime as part of StartUpdate, i don\u0027t think we need to expose ApplyTime as a D-Bus property anymore and perform an inheritance for this D-Bus interface. Since, we have kept the DefaultApplyTime as Immediate in BMCWeb, i think its better that i can change https://grok.openbmc.org/xref/openbmc/bmcweb/redfish-core/lib/update_service.hpp?r\u003d62598e31\u0026fi\u003dsoftwareInterfaceAdded#759 to by default return immediate for StartUpdate use case,",
      "parentUuid": "8047b9c2_001e7f71",
      "range": {
        "startLine": 10,
        "startChar": 25,
        "endLine": 10,
        "endChar": 50
      },
      "revId": "e256c5438f3d2a32b80d05bed6a3190985ac4d26",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}