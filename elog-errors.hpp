// This file was autogenerated.  Do not edit!
// See elog-gen.py for more details
#pragma once

#include <string>
#include <tuple>
#include <type_traits>
#include <sdbusplus/exception.hpp>
#include <phosphor-logging/log.hpp>
#include <phosphor-logging/elog.hpp>


namespace phosphor
{

namespace logging
{

namespace xyz
{
namespace openbmc_project
{
namespace Software
{
namespace Version
{
namespace _UnTarFailure
{


}  // namespace _UnTarFailure

struct UnTarFailure : public sdbusplus::exception_t
{
    static constexpr auto errName = "xyz.openbmc_project.Software.Version.UnTarFailure";
    static constexpr auto errDesc = "An error occurred during untar.";
    static constexpr auto L = level::ERR;
    using metadata_types = std::tuple<>;

    const char* name() const noexcept
    {
        return errName;
    }

    const char* description() const noexcept
    {
        return errDesc;
    }

    const char* what() const noexcept
    {
        return errName;
    }
};

} // namespace Version
} // namespace Software
} // namespace openbmc_project
} // namespace xyz

namespace xyz
{
namespace openbmc_project
{
namespace Software
{
namespace Version
{
namespace _ManifestFileFailure
{


}  // namespace _ManifestFileFailure

struct ManifestFileFailure : public sdbusplus::exception_t
{
    static constexpr auto errName = "xyz.openbmc_project.Software.Version.ManifestFileFailure";
    static constexpr auto errDesc = "An error when reading the Manifest file.";
    static constexpr auto L = level::ERR;
    using metadata_types = std::tuple<>;

    const char* name() const noexcept
    {
        return errName;
    }

    const char* description() const noexcept
    {
        return errDesc;
    }

    const char* what() const noexcept
    {
        return errName;
    }
};

} // namespace Version
} // namespace Software
} // namespace openbmc_project
} // namespace xyz

namespace xyz
{
namespace openbmc_project
{
namespace Software
{
namespace Version
{
namespace _InternalFailure
{


}  // namespace _InternalFailure

struct InternalFailure : public sdbusplus::exception_t
{
    static constexpr auto errName = "xyz.openbmc_project.Software.Version.InternalFailure";
    static constexpr auto errDesc = "The operation failed internally during processing the image.";
    static constexpr auto L = level::ERR;
    using metadata_types = std::tuple<>;

    const char* name() const noexcept
    {
        return errName;
    }

    const char* description() const noexcept
    {
        return errDesc;
    }

    const char* what() const noexcept
    {
        return errName;
    }
};

} // namespace Version
} // namespace Software
} // namespace openbmc_project
} // namespace xyz


} // namespace logging

} // namespace phosphor
