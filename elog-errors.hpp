// This file was autogenerated.  Do not edit!
// See elog-gen.py for more details
#pragma once

#include <phosphor-logging/elog.hpp>
#include <phosphor-logging/log.hpp>
#include <sdbusplus/exception.hpp>

#include <string>
#include <tuple>
#include <type_traits>

namespace sdbusplus
{
namespace xyz
{
namespace openbmc_project
{
namespace Software
{
namespace Image
{
namespace Error
{
struct UnTarFailure;
} // namespace Error
} // namespace Image
} // namespace Software
} // namespace openbmc_project
} // namespace xyz
} // namespace sdbusplus

namespace sdbusplus
{
namespace xyz
{
namespace openbmc_project
{
namespace Software
{
namespace Image
{
namespace Error
{
struct InternalFailure;
} // namespace Error
} // namespace Image
} // namespace Software
} // namespace openbmc_project
} // namespace xyz
} // namespace sdbusplus

namespace sdbusplus
{
namespace xyz
{
namespace openbmc_project
{
namespace Software
{
namespace Image
{
namespace Error
{
struct ManifestFileFailure;
} // namespace Error
} // namespace Image
} // namespace Software
} // namespace openbmc_project
} // namespace xyz
} // namespace sdbusplus

namespace phosphor
{

namespace logging
{

namespace xyz
{
namespace openbmc_project
{
namespace Software
{
namespace Image
{
namespace _UnTarFailure
{

struct PATH
{
    static constexpr auto str = "PATH=%s";
    static constexpr auto str_short = "PATH";
    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;
    explicit constexpr PATH(const char* a) : _entry(entry(str, a)){};
    type _entry;
};

} // namespace _UnTarFailure

struct UnTarFailure : public sdbusplus::exception_t
{
    static constexpr auto errName =
        "xyz.openbmc_project.Software.Image.UnTarFailure";
    static constexpr auto errDesc = "An error occurred during untar.";
    static constexpr auto L = level::ERR;
    using PATH = _UnTarFailure::PATH;
    using metadata_types = std::tuple<PATH>;

    const char* name() const noexcept
    {
        return errName;
    }

    const char* description() const noexcept
    {
        return errDesc;
    }

    const char* what() const noexcept
    {
        return errName;
    }
};

} // namespace Image
} // namespace Software
} // namespace openbmc_project
} // namespace xyz

namespace details
{

template <>
struct map_exception_type<
    sdbusplus::xyz::openbmc_project::Software::Image::Error::UnTarFailure>
{
    using type = xyz::openbmc_project::Software::Image::UnTarFailure;
};
} // namespace details

namespace xyz
{
namespace openbmc_project
{
namespace Software
{
namespace Image
{
namespace _ManifestFileFailure
{

struct PATH
{
    static constexpr auto str = "PATH=%s";
    static constexpr auto str_short = "PATH";
    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;
    explicit constexpr PATH(const char* a) : _entry(entry(str, a)){};
    type _entry;
};

} // namespace _ManifestFileFailure

struct ManifestFileFailure : public sdbusplus::exception_t
{
    static constexpr auto errName =
        "xyz.openbmc_project.Software.Image.ManifestFileFailure";
    static constexpr auto errDesc = "An error when reading the Manifest file.";
    static constexpr auto L = level::ERR;
    using PATH = _ManifestFileFailure::PATH;
    using metadata_types = std::tuple<PATH>;

    const char* name() const noexcept
    {
        return errName;
    }

    const char* description() const noexcept
    {
        return errDesc;
    }

    const char* what() const noexcept
    {
        return errName;
    }
};

} // namespace Image
} // namespace Software
} // namespace openbmc_project
} // namespace xyz

namespace details
{

template <>
struct map_exception_type<sdbusplus::xyz::openbmc_project::Software::Image::
                              Error::ManifestFileFailure>
{
    using type = xyz::openbmc_project::Software::Image::ManifestFileFailure;
};
} // namespace details

namespace xyz
{
namespace openbmc_project
{
namespace Software
{
namespace Image
{
namespace _InternalFailure
{

struct FAIL
{
    static constexpr auto str = "FAIL=%s";
    static constexpr auto str_short = "FAIL";
    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;
    explicit constexpr FAIL(const char* a) : _entry(entry(str, a)){};
    type _entry;
};

} // namespace _InternalFailure

struct InternalFailure : public sdbusplus::exception_t
{
    static constexpr auto errName =
        "xyz.openbmc_project.Software.Image.InternalFailure";
    static constexpr auto errDesc =
        "The operation failed internally during processing the image.";
    static constexpr auto L = level::ERR;
    using FAIL = _InternalFailure::FAIL;
    using metadata_types = std::tuple<FAIL>;

    const char* name() const noexcept
    {
        return errName;
    }

    const char* description() const noexcept
    {
        return errDesc;
    }

    const char* what() const noexcept
    {
        return errName;
    }
};

} // namespace Image
} // namespace Software
} // namespace openbmc_project
} // namespace xyz

namespace details
{

template <>
struct map_exception_type<
    sdbusplus::xyz::openbmc_project::Software::Image::Error::InternalFailure>
{
    using type = xyz::openbmc_project::Software::Image::InternalFailure;
};
} // namespace details

} // namespace logging

} // namespace phosphor
